--USERS

CREATE TABLE USERS (
    -- FIELDS
    USER_ID INT(10) AUTO_INCREMENT NOT NULL,
    USER_PSEUDO VARCHAR(50) NOT NULL,
    USER_BDAY DATE NOT NULL,
    USER_IS_ADMIN BOOLEAN NOT NULL,
    USER_IS_BANNED BOOLEAN NOT NULL,
    USER_NAME VARCHAR(50),
    USER_LASTNAME VARCHAR(50),
    USER_BIO VARCHAR(500),
    USER_DEGREE VARCHAR(50),
    USER_JOB VARCHAR(50),
    USER_COMPANY VARCHAR(50),
    USER_FORMATION VARCHAR(50),
    USER_CITY VARCHAR(50),
    USER_EMAIL VARCHAR(125) NOT NULL,

    -- PRIMARY KEYS
    PRIMARY KEY (USER_ID)
)

--- TOKEN

CREATE TABLE TOKENS (
    TOK_ID INT(10) AUTO_INCREMENT NOT NULL,
    TOK_USER INT(10) NOT NULL,
    TOK_TOKEN VARCHAR(255) NOT NULL,
    TOK_DATE DATETIME DEFAULT NOW(),
    TOK_DEVICE VARCHAR(255) NOT NULL,

    -- PRIMARY KEY
    PRIMARY KEY (TOK_ID),

    -- FOREIGN KEY
    FOREIGN KEY (TOK_USER) REFERENCES USERS(USER_ID)
)

CREATE PROCEDURE REMOVE_OLD_TOKEN ()
BEGIN
    DECLARE COUNT_USERS INT;

    SELECT COUNT_USERS = COUNT(TOK_ID) FROM TOKENS WHERE DATEFIFF(NOW(), TOK_DATE) > 30;

    DELETE * FROM TOKENS WHERE DATEDIFF(NOW(), TOK_DATE) > 30;

    RETURN CONCAT(COUNT_USERS, ' USERS TOKEN HAVE BEEN DELETED');
END


-- REPORTS
CREATE TABLE REPORTS (
    REPT_ID INT(10) AUTO_INCREMENT,
    REPT_USER INT(10) NOT NULL,
    REPT_REASON VARCHAR(255),
    REPT_DATE DATETIME DEFAULT NOW(),

    -- PRIMARY KEYS
    PRIMARY KEY (REPT_ID)

    -- FOREIGN KEY
    FOREIGN KEY (REPT_USER) REFERENCES USERS(USER_ID)
)


-- BLACKLIST
CREATE TABLE BLACKLIST (
    BLLT_USER INT(10) NOT NULL,
    BLLT_BLOCKED_USER INT(10) NOT NULL,

    -- FOREIGN KEY
    FOREIGN KEY (BLLT_USER) REFERENCES USERS(USER_ID),
    FOREIGN KEY (BLLT_BLOCKED_USER) REFERENCES USERS(USER_ID)
)


--NETWORKS

CREATE TABLE NETWORKS (
    -- FIELDS
    NET_ID INT(10) AUTO_INCREMENT NOT NULL,
    NET_NAME VARCHAR(255) NOT NULL,
    NET_ICON BLOB NOT NULL,

    PRIMARY KEY (NET_ID)
)

CREATE TABLE NETWORKS_USERS (
    -- FIELDS
    NET_USER_USER INT(10) NOT NULL,
    NET_USER_URL VARCHAR(255) NOT NULL,
    NET_USER_NETWORK INT(10) NOT NULL,

    -- FOREIGN KEYS
    FOREIGN KEY (NET_USER_USER) REFERENCES USERS(USER_ID),
    FOREIGN KEY (NET_USER_NETWORK) REFERENCES NETWORKS(NET_ID)
)


-- LANGAGES
CREATE TABLE LANGAGES (
    -- FIELDS
    LANG_ID INT(10) AUTO_INCREMENT NOT NULL,
    LANG_NAME VARCHAR(255) NOT NULL,
    --LANGAGES_FLAG BLOB,  -- A REVOIR
    PRIMARY KEY (LANG_ID
)

CREATE TABLE USERS_LANGAGES (
    USER_LANG_USER INT(10) NOT NULL,
    USER_LANG_LANG INT(10) NOT NULL,

    -- FOREIGN KEYS
    FOREIGN KEY (USER_LANG_USER) REFERENCES LANGAGES(LANGAGES_ID),
    FOREIGN KEY (USER_LANG_LANG) REFERENCES USERS(USER_ID)
)


-- PROGRAMMING LANGAGES
CREATE TABLE PROGRAMMING_LANGAGES (
    -- FIELDS
    PROG_ID INT(10) AUTO_INCREMENT NOT NULL,
    PROG_NAME VARCHAR(255) NOT NULL,
    PROG_ICON BLOB,

    -- PRIMARY KEY
    PRIMARY KEY (PROG_ID)
)

CREATE TABLE USER_PROGRAMMING_LANGAGES (
    -- FIELDS
    USER_PROG_LANG INT(10) NOT NULL,
    USER_PROG_USER INT(10) NOT NULL,

    -- FOREIGN KEYS
    FOREIGN KEY (USER_PROG_LANG) REFERENCES PROGRAMMING_LANGAGES(PROG_ID),
    FOREIGN KEY (USER_PROG_USER) REFERENCES USERS(USER_ID)
)


-- MESSAGES
CREATE TABLE CHANNELS (
    --FIELDS
    CHAN_ID INT(10) NOT NULL AUTO_INCREMENT,
    CHAN_USER INT(10) NOT NULL,
    CHAN_IS_ACTIVE BOOLEAN NOT NULL,
    CHAN_CREA_DATE DATETIME DEFAULT NOW(),

    --PRIMARY KEY
    PRIMARY KEY (CHAN_ID),

    -- FOREIGN KEY
    FOREIGN KEY (CHAN_USER) REFERENCES USERS(USER_ID)
)

CREATE TABLE MESSAGES (
    --FIELDS
    MSGS_ID INT(10) AUTO_INCREMENT NOT NULL,
    MSGS_CHAN INT(10) NOT NULL,
    MSGS_USER INT(10) NOT NULL,
    MSGS_MESSAGE TEXT NOT NULL,
    MSGS_DATE DATETIME DEFAULT NOW() NOT NULL,
    MSGS_DELETED_DATE DATETIME

    -- PRIMARY KEY
    PRIMARY KEY (MSGS_ID),

    --FOREIGN KEY
    FOREIGN KEY (MSGS_USER) REFERENCES USERS(USER_ID),
    FOREIGN KEY (MSGS_CHAN) REFERENCES CHANNELS(CHAN_ID)
)


-- LIKE
CREATE TABLE LIKES (
    LIKE_USER INT(10) NOT NULL,
    LIKE_TARGET INT(10) NOT NULL,
    LIKE_IS_LIKED BOOLEAN NOT NULL,
    LIKE_DATE DATETIME DEFAULT NOW() NOT NULL,

    -- FOREIGN KEY
    FOREIGN KEY (LIKE_USER) REFERENCES USERS(USER_ID),
    FOREIGN KEY (LIKE_TARGET) REFERENCES USERS(USER_ID)
)